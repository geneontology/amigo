////
//// Some unit testing for linker.js (even though its data is generated).
////

// Correct environment, ready testing.
var bbop = require('bbop').bbop;
var amigo = require('amigo2').amigo;
var mr_t = new bbop.test();

///
/// Start unit testing.
///

(function(){

var sd = new amigo.data.server();
var wa = sd.app_base();
var l = new amigo.linker();

//mr_t.is_defined(amigo.version.revision, 'revision defined');
//mr_t.is_defined(amigo.version.release, 'release defined');
mr_t.is_same_atom(l.url('GO:0022008'),
		  'http://amigo.geneontology.org/amigo/term/GO:0022008',
		  'linker: go');
mr_t.is_same_atom(l.url('GO:0022008', 'term'),
		  //'amigo?mode=term&term=GO:0022008',
		  //'term/GO:0022008',
		  wa + '/amigo/term/GO:0022008',
		  'linker: go term');
mr_t.is_same_atom(l.url('foo', 'gp'),
		  //'amigo?mode=gene_product&gp=foo',
		  //'gene_product/foo',
		  wa + '/amigo/gene_product/foo',
		  'linker: go gp');
mr_t.is_same_atom(l.url('SGD:S000006169'),
		  'http://www.yeastgenome.org/locus/S000006169/overview',
		  'linker: sgd');
mr_t.is_same_atom(l.url('XXXX:S000006169'),
		  null,
		  'linker: null');


mr_t.is_same_atom(l.url('WB:WBGene00003001'),
		  'http://www.wormbase.org/get?name=WBGene00003001&class=Gene',
		  'linker: wb gene');
mr_t.is_same_atom(l.url('WB:WBVar00249887'),
		  'http://www.wormbase.org/get?name=WBVar00249887&class=Variation',
		  'linker: wb variation');
mr_t.is_same_atom(l.url('WP:CE01843'),
		  'http://www.wormbase.org/get?name=WP:CE01843&class=Protein',
		  'linker: wb protein');


// Okay, now check that synonyms work like we think they should.
// Try it on the every annoying NCBITaxon.
mr_t.is_same_atom(l.url('taxon:7227'),
		  'http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7227',
		  'linker: ncbi taxon 1');
mr_t.is_same_atom(l.url('NCBITaxon:7227'),
		  'http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7227',
		  'linker: ncbi taxon 2');
mr_t.is_same_atom(l.url('ncbi_taxid:7227'),
		  'http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7227',
		  'linker: ncbi taxon 3');

// And make sure that we can do things like PANTHER's double.
// url_syntax: http://www.geneontology.org/gene-associations/submission/paint/[example_id]/[example_id].txt
mr_t.is_same_atom(l.url('PAINT_REF:PTHR10046'),
		  'http://www.geneontology.org/gene-associations/submission/paint/PTHR10046/PTHR10046.txt',
		  'linker: panther');

// And let's make sure that nothing produces nothing.
mr_t.is_not_defined(l.url(null), 'null url');
mr_t.is_not_defined(l.url(''), "'' url");
mr_t.is_not_defined(l.anchor(null), 'null anchor');

// Some hard-wirder internal link testing.
function _ends_with(str, suff){
    var off = str.length - suff.length;
    var ret = false;
    if( str.indexOf(suff, off) != -1 ){
	ret = true;
    }
    return ret;
}
mr_t.is_true(_ends_with(l.url(null, 'medial_search'),
			'/amigo/medial_search'),
	     'interlink: medial_search special (1)');
mr_t.is_true(_ends_with(l.url('', 'medial_search'),
			'/amigo/medial_search?q='),
	     'interlink: medial_search special (2)');
mr_t.is_true(_ends_with(l.url('foo', 'medial_search'),
			'/amigo/medial_search?q=foo'),
	     'interlink: medial_search special (3)');
mr_t.is_true(_ends_with(l.url(null, 'grebe'),
			'/grebe'),
	     'interlink: grebe not special (1)');
mr_t.is_true(_ends_with(l.url('', 'grebe'),
			'/grebe'),
	     'interlink: grebe not special (2)');
mr_t.is_true(_ends_with(l.url('foo', 'grebe'),
			'/grebe'),
	     'interlink: grebe not special (3): ' + l.url('foo', 'grebe'));

 })();

///
/// End unit testing.
///

// Final report.
mr_t.report();
